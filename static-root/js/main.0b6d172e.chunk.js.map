{"version":3,"sources":["lookup/components.js","posts/lookup.js","posts/list.js","posts/buttons.js","posts/detail.js","posts/components.js","serviceWorker.js","index.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","console","log","responseType","open","setRequestHeader","onload","response","status","send","loadPosts","username","postAction","postId","action","content","id","PostList","props","useState","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","myCallback","alert","message","useEffect","allPosts","newPosts","concat","length","handleDidRepost","newPost","updatedPostsInit","unshift","updatedPosts","className","map","post","index","Post","didRepost","key","ActionBtn","didPerformAction","likes","actionDisplay","display","type","handleBackendAction","Fragment","onClick","event","preventDefault","window","location","reload","isRepost","refreshPosts","setPost","actionPost","setActionPost","path","pathname","idRegex","match","groups","postid","isDetail","handlePerformAction","newActionPost","handleLink","href","undefined","text","parent","PostComponent","personal","canPost","setNewPosts","handleSubmit","newValue","textAreaRef","current","value","tempNewPosts","React","createRef","onSubmit","required","ref","placeholder","name","cols","rows","PostDetailComponent","didLookup","setDidLookup","detailPost","Boolean","hostname","e","createElement","page","document","getElementById","ReactDOM","render","dataset","pageDetailHtml","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0b6d172e.chunk.js","sourcesContent":["\r\n// Get Cookie:\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      const cookies = document.cookie.split(';');\r\n      for (let i = 0; i < cookies.length; i++) {\r\n          const cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }   \r\n  return cookieValue;\r\n}\r\n\r\n\r\n// Generalizing Lookups:\r\n\r\nexport function lookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data) {\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = 'http://localhost:8000/posts/' + endpoint\r\n  console.log(url)\r\n  xhr.responseType = 'json'\r\n  xhr.open(method, url)\r\n  // const csrftoken = getCookie('csrftoken');\r\n  xhr.setRequestHeader(\"Content-Type\", 'application/json')\r\n  // if (csrftoken){\r\n  //   // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", 'XMLHttpRequest')\r\n  //   // xhr.setRequestHeader(\"X-Requested-With\", 'XMLHttpRequest')\r\n  //   xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  // }\r\n  xhr.onload = function() {\r\n    console.log(xhr.response)\r\n    console.log(xhr.status)\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  // xhr.onerror = function () {\r\n  //   callback({'message': 'Something is not right. Please Try Again Later.'}, 400)\r\n  // }\r\n  console.log(jsonData)\r\n  xhr.send(jsonData)\r\n\r\n}\r\n\r\n","import {lookup} from '../lookup/index.js' \r\n\r\n// Sending to Backend\r\n\r\nexport function createPost(newPost, callback) {\r\n    console.log(newPost)\r\n    lookup('POST', 'create', callback, {text: newPost})\r\n}\r\n  \r\n// Loading Posts\r\n  \r\nexport function loadPosts (callback, username) {\r\n  let endpoint = ''\r\n  if (username) {\r\n    endpoint = `user/${username}`\r\n  }\r\n  lookup('GET', endpoint, callback)\r\n}\r\n\r\n// Detailed Post:\r\nexport function detailPost (callback, postId) {\r\n  lookup('GET', `${postId}`, callback)\r\n}\r\n\r\n// Action Button \r\nexport function postAction (postId, action, callback, content='') {\r\n  if(content !== '') {\r\n    lookup('POST', 'action', callback, {id: postId, action: action, content: content})\r\n  } else {\r\n    lookup('POST', 'action', callback, {id: postId, action: action})\r\n  }\r\n  \r\n}","import React, {useEffect, useState} from 'react'\r\nimport {loadPosts} from './index.js'\r\nimport {Post} from './detail'\r\n\r\n// List of Posts:\r\n  \r\nexport function PostList (props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    const [postsDidSet, setPostsDidSet] = useState(false)\r\n\r\n    let username;\r\n    \r\n    if(props.username) {\r\n        username = props.username\r\n    }\r\n\r\n    const myCallback = (response, status) => {\r\n        console.log(status)\r\n      if(status === 200){\r\n        console.log(response)\r\n        setPostsInit(response)\r\n        setPosts(response)\r\n      } else if (status === 400 ){\r\n        alert(response.message)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        let allPosts = [...props.newPosts].concat(postsInit)\r\n        if (allPosts.length !== posts.length) {\r\n            setPosts(allPosts)\r\n        } \r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n\r\n    useEffect( () => {\r\n        if (postsDidSet === false) {\r\n            if(username) {\r\n                loadPosts(myCallback, username)\r\n            } else {\r\n                loadPosts(myCallback)\r\n            }\r\n            setPostsDidSet(true)\r\n        }\r\n    }, [username])\r\n    \r\n    const handleDidRepost = (newPost) => {\r\n        if (newPost) {\r\n            const updatedPostsInit = [...postsInit]\r\n            updatedPostsInit.unshift(newPost)\r\n            setPostsInit(updatedPostsInit)\r\n            const updatedPosts = [...posts]\r\n            updatedPosts.unshift(posts)\r\n            setPosts(updatedPosts)\r\n        } else {\r\n            loadPosts(myCallback)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <div className=\"col-md-10 mx-auto col-12 text-center\">{posts.map((post, index) => {\r\n      return <Post\r\n      didRepost = {handleDidRepost} \r\n      post={post} \r\n      key={index}\r\n      />\r\n    })}</div>\r\n}\r\n","import React from 'react'\r\nimport {postAction} from './lookup'\r\nimport {Post} from './detail'\r\nimport {PostList} from './list'\r\n\r\n// Buttons \r\n\r\nexport function ActionBtn(props) {\r\n    const {post, action, didPerformAction} = props\r\n    const likes = post.likes ? post.likes : 0\r\n    // const [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    // const [userLike, setUserLike] = useState(post.userLike === true ? true : false)\r\n    const className = action.type === 'like' ? \"btn btn-outline-success mt-3 btn-sm\" : \r\n    action.type === 'unlike' ? \"btn btn-outline-secondary mt-3 btn-sm\" : \r\n    \"btn btn-outline-info mt-3 btn-sm\"\r\n\r\n    const handleBackendAction = (response, status) =>  {\r\n        console.log(status, response)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'repost') {\r\n            postAction(post.id, action.type, handleBackendAction, 'Repost')\r\n            window.location.reload(true);\r\n        } else {\r\n            postAction(post.id, action.type, handleBackendAction)\r\n        }\r\n       \r\n    }\r\n\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}`\r\n\r\n    return <React.Fragment> \r\n        <button className={className} onClick={handleClick}>\r\n        {display} \r\n        </button>\r\n        </React.Fragment>\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {createPost} from './index.js'\r\nimport {ActionBtn} from './buttons'\r\nimport {PostList} from './list'\r\nimport {detailPost} from './lookup'\r\n\r\n\r\n\r\n// Posts\r\nexport function Post(props) {\r\n    const {didRepost, isRepost, refreshPosts} = props\r\n    const [post, setPost] = useState(props.post ? props.post : null) \r\n    const [actionPost, setActionPost] = useState(props.post ? props.post : null)\r\n    \r\n    const path = window.location.pathname\r\n    const idRegex = /(?<postid>\\d+)/\r\n    const match = path.match(idRegex)\r\n    const postId = match ? match.groups.postid : -1\r\n    const isDetail = `${postId}` === `${post.id}`\r\n\r\n    const handlePerformAction = (newActionPost, status) => {\r\n        if (status === 200) {\r\n            setActionPost(newActionPost)\r\n            // didRepost() -> Reloading Parent DOM (useEffect instead)\r\n        } else if (status === 201) {\r\n            setActionPost(newActionPost)\r\n            didRepost(newActionPost)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n       \r\n        window.location.href = `${post.id}`\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        setPost(actionPost)\r\n    }, [post, actionPost])\r\n\r\n    let className = \"border p-5 m-5  post\"\r\n    if (isRepost == undefined) {\r\n        className = \"border p-2 m-2 mt-5 post\"\r\n    } else {\r\n        className = \"border p-3 m-2 mt-3 mb-3 post\"\r\n    }\r\n\r\n    // Repost -> \"border p-5 m-5 post\"\r\n    // Post -> \"border p-5 m-5 post\"\r\n\r\n    return <div className={className}>\r\n    <h5> <span id={post.id} > {post.text} </span> </h5>\r\n    <h5><span>{post.parent && <Post post={post.parent} isRepost={false} />}</span></h5>\r\n    { isRepost == undefined ?\r\n        <div className=\"btn btn-group\">\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'like', display:'Likes'}} />\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'unlike', display: 'Unlike'}} />\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'repost', display: 'Repost'}} />\r\n            {isDetail === true ? null : <button className=\"btn btn-outline-dark mt-3 btn-sm\" onClick={handleLink}>View Post</button>}\r\n        </div> : \r\n            <div className=\"btn btn-group\">{isDetail === true ? null : <button className=\"btn btn-outline-dark mt-3 btn-sm\" onClick={handleLink}>View Post</button>}</div>\r\n    }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {createPost} from './index.js'\r\nimport {PostList} from './list'\r\nimport {detailPost} from './lookup'\r\nimport {Post} from './detail'\r\n\r\n// Form\r\n\r\nexport function PostComponent(props) {\r\n\r\n    const username = props.username\r\n    let personal = props.personal\r\n    const canPost = props.canPost\r\n    \r\n    const [newPosts, setNewPosts] = useState([])\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newValue = textAreaRef.current.value\r\n        let tempNewPosts = [...newPosts]\r\n\r\n        createPost(newValue, (response, status) => {\r\n            if (status === 201) {\r\n                console.log(response)\r\n                tempNewPosts.unshift(response)\r\n                setNewPosts(tempNewPosts)\r\n            } else {\r\n                alert(\"Something's not right. Please try again.\")\r\n            }\r\n        })\r\n        \r\n        \r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    const textAreaRef = React.createRef()\r\n    if(personal == true) {\r\n        return <div className=\"col-md-10 mx-auto col-12 text-center\">\r\n            <h3>{username}</h3>\r\n            {canPost == 'true' &&\r\n            <div className=\"mt-5 col-md-8 mx-auto col-10 text-center\"> \r\n                <form onSubmit={handleSubmit} className=\"form-group mt-3\">\r\n                    <textarea required={true} ref={textAreaRef} placeholder=\"Your Post!\" className=\"form-control\" name=\"post\" cols=\"10\" rows=\"8\">\r\n                    </textarea>\r\n                    <button type=\"submit\" className=\"btn btn-success colorme my-3\">\r\n                        Post\r\n                    </button>\r\n                </form>\r\n            </div> }\r\n        <PostList newPosts={newPosts} username={username} /> :\r\n        {/* <PostList newPosts={newPosts} /> */}\r\n    </div>\r\n    } else {\r\n        return <div className=\"col-md-10 mx-auto col-12 text-center\">\r\n        <h3>{username}</h3>\r\n        {canPost == 'true' &&\r\n        <div className=\"mt-5 col-md-8 mx-auto col-10 text-center\">\r\n            <form onSubmit={handleSubmit} className=\"form-group mt-3\">\r\n                <textarea required={true} ref={textAreaRef} placeholder=\"Your Post!\" className=\"form-control\" name=\"post\" cols=\"10\" rows=\"8\">\r\n                </textarea>\r\n                <button type=\"submit\" className=\"btn btn-success colorme my-3\">\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div> }\r\n        {/* <PostList newPosts={newPosts} username={username} /> : */}\r\n        <PostList newPosts={newPosts} />\r\n    </div>\r\n    }\r\n    \r\n}\r\n\r\n\r\n// Detailed Post\r\n\r\nexport function PostDetailComponent(props) {\r\n    const postId = props.postid\r\n    console.log('Post Id: ', postId)\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [post, setPost] = useState(null)\r\n\r\n    const myCallback = (response, status) => {\r\n        console.log(response)\r\n        if (status === 200 || status === 201) {\r\n            setPost(response)\r\n        } else {\r\n            alert('The requested Post acannot be fetched. Try again later.')\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            detailPost(myCallback, postId)\r\n            setDidLookup(true)\r\n        }\r\n    }, [postId, didLookup, setDidLookup])\r\n\r\n    return post === null ? null : <Post post={post} />\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostDetailComponent, PostComponent} from './posts'\n\n\n\nconst e = React.createElement\n\n\n\n// pageDetail.forEach( (container) => {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <PostDetailComponent postId = {container.dataset.postid} />\n//     </React.StrictMode>,\n//     container\n//   );\n// })\n\nconst page = document.getElementById('page-root')\nif (page) {\n  ReactDOM.render(\n    e(PostComponent, page.dataset), page\n  )\n}\n\nconst pageDetailHtml = document.querySelectorAll('.rootdetail')\nconsole.log(pageDetailHtml)\n// var pageDetail = Array.from(pageDetailHtml);\n// console.log(pageDetail)\npageDetailHtml.forEach((container) => {\n  ReactDOM.render(\n    e(PostDetailComponent, container.dataset), container\n  )\n})\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App username={page.dataset.username} personal={page.dataset.personal} canPost={page.dataset.canpost}/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}