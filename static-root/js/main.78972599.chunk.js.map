{"version":3,"sources":["posts/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["ActionBtn","props","post","action","useState","likes","setLikes","actionDisplay","display","userLike","setUserLike","className","type","Fragment","onClick","event","preventDefault","console","log","Post","id","text","PostList","postsInit","setPostsInit","posts","setPosts","myCallback","response","status","alert","message","useEffect","allPosts","newPosts","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","onerror","send","loadPosts","map","index","key","PostComponent","setNewPosts","textAreaRef","React","createRef","onSubmit","newValue","current","value","tempNewPosts","unshift","required","ref","placeholder","name","cols","rows","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.78972599.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {loadPosts} from '../lookup'\r\n\r\n\r\n// Buttons \r\nexport function ActionBtn(props) {\r\n    const {post, action} = props\r\n    const [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const [userLike, setUserLike] = useState(post.userLike === true ? true : false)\r\n    const className = action.type === 'like' ? \"btn btn-outline-success ml-1 mt-3\" : \r\n    action.type === 'unlike' ? \"btn btn-outline-secondary ml-1 mt-3\" : \r\n    \"btn btn-outline-info ml-1 mt-3\"\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setUserLike(false)\r\n                setLikes(likes - 1)\r\n            } else {\r\n                setUserLike(true)\r\n                setLikes(likes + 1)\r\n            }\r\n        } else if (action.type === 'unlike') {\r\n            setLikes(likes - 1)\r\n        } else if (action.type === 'repost') {\r\n            console.log('Repost')\r\n        }\r\n    }\r\n\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}`\r\n\r\n    return <React.Fragment> \r\n        <button className={className} onClick={handleClick}>\r\n        {display} \r\n        </button>\r\n    </React.Fragment>\r\n}\r\n\r\n// Posts\r\nexport function Post(props) {\r\n    const {post} = props\r\n    return <div className=\"border p-5 m-5 post\">\r\n      <h5> <span id={post.id}> {post.text} </span> </h5>\r\n      <div className=\"btn btn-group\">\r\n        <ActionBtn post = {post} action={{type: 'like', display:'Likes'}} />\r\n        <ActionBtn post = {post} action={{type: 'unlike', display: 'Unlike'}} />\r\n        <ActionBtn post = {post} action={{type: 'repost', display: 'Repost'}} />\r\n      </div>\r\n    </div>\r\n}\r\n\r\n// List of Posts:\r\n  \r\nexport function PostList (props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n\r\n    const myCallback = (response, status) => {\r\n      if(status === 200){\r\n        setPostsInit(response)\r\n      } else if (status === 400 ){\r\n        alert(response.message)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        let allPosts = [...props.newPosts].concat(postsInit)\r\n        if (allPosts.length !== posts.length) {\r\n            setPosts(allPosts)\r\n        } \r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n\r\n    useEffect( () => {\r\n      loadPosts(myCallback)\r\n    }, [])\r\n  \r\n    return <div className=\"col-md-10 mx-auto col-12 text-center\">{posts.map((post, index) => {\r\n      return <Post post={post} key={index}/>\r\n    })}</div>\r\n}\r\n\r\n\r\n// Form\r\n\r\n\r\nexport function PostComponent(props) {\r\n\r\n    const [newPosts, setNewPosts] = useState([])\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        console.log(event)\r\n        const newValue = textAreaRef.current.value\r\n        let tempNewPosts = [...newPosts]\r\n        tempNewPosts.unshift({\r\n            text: newValue,\r\n            likes: 0,\r\n            id: 2020,\r\n        })\r\n        setNewPosts(tempNewPosts)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    \r\n\r\n    const textAreaRef = React.createRef()\r\n    return <div className=\"col-md-10 mx-auto col-12 text-center\">\r\n        <div className=\"mt-5 col-md-8 mx-auto col-10 text-center\">\r\n            <form onSubmit={handleSubmit} className=\"form-group\">\r\n                <textarea required={true} ref={textAreaRef} placeholder=\"Your Post!\" className=\"form-control\" name=\"post\" cols=\"10\" rows=\"8\">\r\n                </textarea>\r\n                <button type=\"submit\" className=\"btn btn-success colorme my-3\">\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div>\r\n        <PostList newPosts={newPosts} />\r\n    </div>\r\n}","// Loading Posts\r\n\r\nexport function loadPosts (callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = 'http://localhost:8000/posts/'\r\n    const responseType = 'json'\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function () {\r\n      callback({'message': 'Something is not right. Please Try Again Later.'}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React from 'react';\n\nimport {PostComponent} from './posts/index.js'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PostComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}