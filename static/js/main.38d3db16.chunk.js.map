{"version":3,"sources":["lookup/components.js","posts/lookup.js","posts/list.js","posts/buttons.js","posts/detail.js","posts/components.js","serviceWorker.js","index.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","loadPosts","username","postAction","postId","action","content","id","PostList","props","useState","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","myCallback","console","log","alert","message","useEffect","newPosts","allPosts","concat","handleDidRepost","newPost","updatedPostsInit","unshift","updatedPosts","className","map","post","index","Post","didRepost","key","ActionBtn","didPerformAction","likes","actionDisplay","display","type","handleBackendAction","Fragment","onClick","event","preventDefault","reload","isRepost","refreshPosts","setPost","actionPost","setActionPost","path","pathname","idRegex","match","groups","postid","isDetail","handlePerformAction","newActionPost","handleLink","undefined","text","parent","PostComponent","personal","canPost","setNewPosts","handleSubmit","newValue","textAreaRef","current","value","tempNewPosts","React","createRef","onSubmit","required","ref","placeholder","cols","rows","PostDetailComponent","didLookup","setDidLookup","detailPost","Boolean","hostname","createElement","page","getElementById","dataset","ReactDOM","render","canpost","pageDetailHtml","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.38d3db16.chunk.js","sourcesContent":["\r\n// // Get Cookie:\r\n// function getCookie(name) {\r\n//   let cookieValue = null;\r\n//   if (document.cookie && document.cookie !== '') {\r\n//       const cookies = document.cookie.split(';');\r\n//       for (let i = 0; i < cookies.length; i++) {\r\n//           const cookie = cookies[i].trim();\r\n//           // Does this cookie string begin with the name we want?\r\n//           if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n//               cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n//               break;\r\n//           }\r\n//       }\r\n//   }   \r\n//   return cookieValue;\r\n// }\r\n\r\n\r\n// // Generalizing Lookups:\r\n\r\n// export function lookup(method, endpoint, callback, data) {\r\n//   let jsonData;\r\n//   if (data) {\r\n//     jsonData = JSON.stringify(data)\r\n//   }\r\n//   const xhr = new XMLHttpRequest()\r\n//   const url = 'http://localhost:8000/posts/api/' + endpoint\r\n//   console.log(url)\r\n//   xhr.responseType = 'json'\r\n//   xhr.open(method, url)\r\n//   const csrftoken = getCookie('csrftoken');\r\n//   xhr.setRequestHeader(\"Content-Type\", 'application/json')\r\n//   console.log('Token: ', csrftoken)\r\n//   if (csrftoken){\r\n//     // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", 'XMLHttpRequest')\r\n//     xhr.setRequestHeader(\"X-Requested-With\", 'XMLHttpRequest')\r\n//     xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'))\r\n//     // xhr.setRequestHeader(\"sessionid\", getCookie('sessionid'))\r\n//   }\r\n//   xhr.onload = function() {\r\n//     if (xhr.status === 403) {\r\n//       const detail = xhr.response.detail\r\n//       if (detail === \"Authentication credentials were not provided.\"){\r\n//         if (window.location.href.indexOf(\"login\") === -1) {\r\n//           window.location.href = \"/login?showLoginRequired=true\"\r\n//         }\r\n//       }\r\n//     }\r\n//     console.log(xhr.response)\r\n//     console.log(xhr.status)\r\n//     callback(xhr.response, xhr.status)\r\n//   }\r\n//   xhr.onerror = function () {\r\n//     callback({'message': 'Something is not right. Please Try Again Later.'}, 400)\r\n//   }\r\n//   console.log(jsonData)\r\n//   xhr.send(jsonData)\r\n\r\n// }\r\n\r\nfunction getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function lookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/posts/api/${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if (csrftoken){\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\"){\r\n        if (window.location.href.indexOf(\"login\") === -1) {\r\n          window.location.href = \"/login?showLoginRequired=true\"\r\n        }\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n}","import {lookup} from '../lookup/index.js' \r\n\r\n// Sending to Backend\r\n\r\nexport function createPost(newPost, callback) {\r\n    console.log(newPost)\r\n    lookup('POST', 'create', callback, {text: newPost})\r\n}\r\n  \r\n// Loading Posts\r\n  \r\nexport function loadPosts (callback, username) {\r\n  let endpoint = ''\r\n  if (username) {\r\n    endpoint = `user/${username}`\r\n  }\r\n  lookup('GET', endpoint, callback)\r\n}\r\n\r\n// Detailed Post:\r\nexport function detailPost (callback, postId) {\r\n  lookup('GET', `${postId}`, callback)\r\n}\r\n\r\n// Action Button \r\nexport function postAction (postId, action, callback, content='') {\r\n  if(content !== '') {\r\n    lookup('POST', 'action', callback, {id: postId, action: action, content: content})\r\n  } else {\r\n    lookup('POST', 'action', callback, {id: postId, action: action})\r\n  }\r\n  \r\n}","import React, {useEffect, useState} from 'react'\r\nimport {loadPosts} from './index.js'\r\nimport {Post} from './detail'\r\n\r\n// List of Posts:\r\n  \r\nexport function PostList (props) {\r\n    const [postsInit, setPostsInit] = useState([])\r\n    const [posts, setPosts] = useState([])\r\n    const [postsDidSet, setPostsDidSet] = useState(false)\r\n\r\n    let username;\r\n    \r\n    if(props.username) {\r\n        username = props.username\r\n    }\r\n\r\n    const myCallback = (response, status) => {\r\n        console.log(status)\r\n      if(status === 200){\r\n        console.log(response)\r\n        setPostsInit(response)\r\n        setPosts(response)\r\n      } else if (status === 400 ){\r\n        alert(response.message)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(props.newPosts) {\r\n            let allPosts = [...props.newPosts].concat(postsInit)\r\n        if (allPosts.length !== posts.length) {\r\n            setPosts(allPosts)\r\n        }\r\n        } \r\n    }, [props.newPosts, posts, postsInit])\r\n\r\n\r\n    useEffect( () => {\r\n        if (postsDidSet === false) {\r\n            if(username) {\r\n                loadPosts(myCallback, username)\r\n            } else {\r\n                loadPosts(myCallback)\r\n            }\r\n            setPostsDidSet(true)\r\n        }\r\n    }, [username])\r\n    \r\n    const handleDidRepost = (newPost) => {\r\n        if (newPost) {\r\n            const updatedPostsInit = [...postsInit]\r\n            updatedPostsInit.unshift(newPost)\r\n            setPostsInit(updatedPostsInit)\r\n            const updatedPosts = [...posts]\r\n            updatedPosts.unshift(posts)\r\n            setPosts(updatedPosts)\r\n        } else {\r\n            loadPosts(myCallback)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <div className=\"col-md-10 mx-auto col-12 text-center\">{posts.map((post, index) => {\r\n      return <Post\r\n      didRepost = {handleDidRepost} \r\n      post={post} \r\n      key={index}\r\n      />\r\n    })}</div>\r\n}\r\n","import React from 'react'\r\nimport {postAction} from './lookup'\r\nimport {Post} from './detail'\r\nimport {PostList} from './list'\r\n\r\n// Buttons \r\n\r\nexport function ActionBtn(props) {\r\n    const {post, action, didPerformAction} = props\r\n    const likes = post.likes ? post.likes : 0\r\n    // const [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    // const [userLike, setUserLike] = useState(post.userLike === true ? true : false)\r\n    const className = action.type === 'like' ? \"btn btn-outline-success mt-3 btn-sm\" : \r\n    action.type === 'unlike' ? \"btn btn-outline-secondary mt-3 btn-sm\" : \r\n    \"btn btn-outline-info mt-3 btn-sm\"\r\n\r\n    const handleBackendAction = (response, status) =>  {\r\n        console.log(status, response)\r\n        if ((status === 200 || status === 201) && didPerformAction) {\r\n            didPerformAction(response, status)\r\n        }\r\n    }\r\n\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'repost') {\r\n            postAction(post.id, action.type, handleBackendAction, 'Repost')\r\n            window.location.reload(true);\r\n        } else {\r\n            postAction(post.id, action.type, handleBackendAction)\r\n        }\r\n       \r\n    }\r\n\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : `${actionDisplay}`\r\n\r\n    return <React.Fragment> \r\n        <button className={className} onClick={handleClick}>\r\n        {display} \r\n        </button>\r\n        </React.Fragment>\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {createPost} from './index.js'\r\nimport {ActionBtn} from './buttons'\r\nimport {PostList} from './list'\r\nimport {detailPost} from './lookup'\r\n\r\n\r\n\r\n// Posts\r\nexport function Post(props) {\r\n    const {didRepost, isRepost, refreshPosts} = props\r\n    const [post, setPost] = useState(props.post ? props.post : null) \r\n    const [actionPost, setActionPost] = useState(props.post ? props.post : null)\r\n    \r\n    const path = window.location.pathname\r\n    const idRegex = /(?<postid>\\d+)/\r\n    const match = path.match(idRegex)\r\n    const postId = match ? match.groups.postid : -1\r\n    const isDetail = `${postId}` === `${post.id}`\r\n\r\n    const handlePerformAction = (newActionPost, status) => {\r\n        if (status === 200) {\r\n            setActionPost(newActionPost)\r\n            // didRepost() -> Reloading Parent DOM (useEffect instead)\r\n        } else if (status === 201) {\r\n            setActionPost(newActionPost)\r\n            didRepost(newActionPost)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    const handleLink = (event) => {\r\n        event.preventDefault()\r\n       \r\n        window.location.href = `/posts/${post.id}`\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        setPost(actionPost)\r\n    }, [post, actionPost])\r\n\r\n    let className = \"border p-5 m-5  post\"\r\n    if (isRepost == undefined) {\r\n        className = \"border p-3 m-2 mt-5 post\"\r\n    } else {\r\n        className = \"border p-3 m-2 mt-3 mb-3 post\"\r\n    }\r\n\r\n    // Repost -> \"border p-5 m-5 post\"\r\n    // Post -> \"border p-5 m-5 post\"\r\n\r\n    return <div className={className}>\r\n    <h5> <span id={post.id} > {post.text} </span> </h5>\r\n    <h5><span>{post.parent && <Post post={post.parent} isRepost={false} />}</span></h5>\r\n    { isRepost == undefined ?\r\n        <div className=\"btn btn-group\">\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'like', display:'Likes'}} />\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'unlike', display: 'Unlike'}} />\r\n            <ActionBtn post = {post} didPerformAction = {handlePerformAction} action={{type: 'repost', display: 'Repost'}} />\r\n            {isDetail === true ? null : <button className=\"btn btn-outline-dark mt-3 btn-sm\" onClick={handleLink}>View Post</button>}\r\n        </div> : \r\n            <div className=\"btn btn-group\">{isDetail === true ? null : <button className=\"btn btn-outline-dark mt-3 btn-sm\" onClick={handleLink}>View Post</button>}</div>\r\n    }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {createPost} from './index.js'\r\nimport {PostList} from './list'\r\nimport {detailPost} from './lookup'\r\nimport {Post} from './detail'\r\n\r\n// Form\r\n\r\nexport function PostComponent(props) {\r\n\r\n    const username = props.username\r\n    let personal = props.personal\r\n    const canPost = props.canPost\r\n    \r\n    const [newPosts, setNewPosts] = useState([])\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newValue = textAreaRef.current.value\r\n        let tempNewPosts = [...newPosts]\r\n\r\n        createPost(newValue, (response, status) => {\r\n            if (status === 201) {\r\n                console.log(response)\r\n                tempNewPosts.unshift(response)\r\n                setNewPosts(tempNewPosts)\r\n            } else {\r\n                alert(\"Something's not right. Please try again.\")\r\n            }\r\n        })\r\n        \r\n        \r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    const textAreaRef = React.createRef()\r\n    if(personal == true) {\r\n        return <div className=\"col-md-10 mx-auto col-12 text-center\">\r\n            <h3>{username}</h3>\r\n            {canPost == 'true' &&\r\n            <div className=\"mt-5 col-md-8 mx-auto col-10 text-center\"> \r\n                <form onSubmit={handleSubmit} className=\"form-group mt-3\">\r\n                    <textarea required={true} ref={textAreaRef} placeholder=\"Your Post!\" className=\"form-control\" name=\"post\" cols=\"10\" rows=\"8\">\r\n                    </textarea>\r\n                    <button type=\"submit\" className=\"btn btn-success colorme my-3\">\r\n                        Post\r\n                    </button>\r\n                </form>\r\n            </div> }\r\n        <PostList newPosts={newPosts} username={username} /> :\r\n        {/* <PostList newPosts={newPosts} /> */}\r\n    </div>\r\n    } else {\r\n        return <div className=\"col-md-10 mx-auto col-12 text-center\">\r\n        <h3>{username}</h3>\r\n        {canPost == 'true' &&\r\n        <div className=\"mt-5 col-md-8 mx-auto col-10 text-center\">\r\n            <form onSubmit={handleSubmit} className=\"form-group mt-3\">\r\n                <textarea required={true} ref={textAreaRef} placeholder=\"Your Post!\" className=\"form-control\" name=\"post\" cols=\"10\" rows=\"8\">\r\n                </textarea>\r\n                <button type=\"submit\" className=\"btn btn-success colorme my-3\">\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div> }\r\n        {/* <PostList newPosts={newPosts} username={username} /> : */}\r\n        <PostList newPosts={newPosts} />\r\n    </div>\r\n    }\r\n    \r\n}\r\n\r\n\r\n// Detailed Post\r\n\r\nexport function PostDetailComponent(props) {\r\n    const postId = props.postid\r\n    console.log('Post Id: ', postId)\r\n    const [didLookup, setDidLookup] = useState(false)\r\n    const [post, setPost] = useState(null)\r\n\r\n    const myCallback = (response, status) => {\r\n        console.log(response)\r\n        if (status === 200 || status === 201) {\r\n            setPost(response)\r\n        } else {\r\n            alert('The requested Post acannot be fetched. Try again later.')\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            detailPost(myCallback, postId)\r\n            setDidLookup(true)\r\n        }\r\n    }, [postId, didLookup, setDidLookup])\r\n\r\n    return post === null ? null : <Post post={post} />\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostDetailComponent, PostList, PostComponent} from './posts'\n\n\n\nconst e = React.createElement\n\n\n\n// pageDetail.forEach( (container) => {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <PostDetailComponent postId = {container.dataset.postid} />\n//     </React.StrictMode>,\n//     container\n//   );\n// })\n\nconst page = document.getElementById('page-root')\nif (page) {\n\tif (page.dataset.personal) {\n\t\tReactDOM.render(\n\t\t\t(<React.Fragment>\n\t\t\t\t<PostComponent username={page.dataset.username} canPost={page.dataset.canpost}/>\n\t\t\t</React.Fragment>), page\n\t\t)\n\t} else {\n\t\tReactDOM.render(\n\t\t\te(PostComponent, page.dataset), page\n\t\t)\n\t}\n}\n\n\nconst pageDetailHtml = document.querySelectorAll('.rootdetail')\nconsole.log(pageDetailHtml)\n// var pageDetail = Array.from(pageDetailHtml);\n// console.log(pageDetail)\npageDetailHtml.forEach((container) => {\n\tReactDOM.render(\n\t\te(PostDetailComponent, container.dataset), container\n\t)\n})\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App username={page.dataset.username} personal={page.dataset.personal} canPost={page.dataset.canpost}/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}